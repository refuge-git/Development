name: CI/CD para EC2 pública e privada

on:
  push:
    branches:
      - main # O branch que acionará o deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      # 2. Configuração do ambiente Java/Maven
      - name: BE - Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      # 3. Geração do .jar
      - name: BE - Gerar Artefato .JAR
        run: mvn package -DskipTests=true
        working-directory: ./servidor-web-clean-arch

      # 4. Padronizar o nome do JAR
      - name: BE - Renomear JAR para app_loko.jar
        run: |
          JAR_NAME=$(ls target/*.jar)
          mv $JAR_NAME target/app_loko.jar
          echo "Renomeado para: target/app_loko.jar"
        working-directory: ./servidor-web-clean-arch

      # 5. Enviar artefato para EC2 pública via rsync
      - name: BE - Copiar arquivos para EC2 pública
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/${{ secrets.REMOTE_USER }}/servidor-web-clean-arch
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "./servidor-web-clean-arch/target/app_loko.jar"

      # 6. Enviar o arquivo da EC2 pública para a EC2 privada e reiniciar serviço
      - name: BE - Enviar para EC2 privada e reiniciar serviço
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Diretório na EC2 pública
            PUBLIC_DIR="/home/${{ secrets.REMOTE_USER }}/servidor-web-clean-arch"
            mkdir -p $PUBLIC_DIR
            echo "Diretório público garantido: $PUBLIC_DIR"

            # Verificar se o JAR existe no diretório público
            if [ ! -f $PUBLIC_DIR/app_loko.jar ]; then
              echo "Arquivo JAR não encontrado em $PUBLIC_DIR!"
              exit 1
            fi
            echo "Arquivo JAR disponível em $PUBLIC_DIR/app_loko.jar"

            # Criar arquivo PEM temporário
            ARQUIVO_PEM="/tmp/labsuser.pem"
            echo "${{ secrets.EC2_SSH_KEY }}" > $ARQUIVO_PEM
            chmod 400 $ARQUIVO_PEM
            echo "Arquivo PEM criado em $ARQUIVO_PEM"

            # Configurar usuário e host da EC2 privada
            USUARIO_IP=${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }}
            echo "usuario@ip configurado: $USUARIO_IP"

            # Enviar JAR da EC2 pública para EC2 privada
            scp -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $PUBLIC_DIR/app_loko.jar $USUARIO_IP:/usr/share/api/app_loko.jar
            echo "Arquivo JAR enviado à EC2 privada"

            # Reiniciar serviço via Docker Compose
            ssh -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker compose restart api'
            echo "Serviço reiniciado via Docker Compose"
