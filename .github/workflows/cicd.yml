name: CI/CD Backend para EC2 privada

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy_be:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout do repositório
        uses: actions/checkout@v4

      # 2. Configuração do JDK/Maven
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      # 3. Build do .jar
      - name: Gerar artefato .JAR
        run: mvn package -DskipTests=true
        working-directory: ./servidor-web-clean-arch

      # 4. Renomear o .jar para app_loko.jar
      - name: Renomear JAR
        run: |
          JAR_NAME=$(ls ./servidor-web-clean-arch/target/*.jar)
          mv $JAR_NAME ./servidor-web-clean-arch/target/app_loko.jar
          echo "Renomeado para: ./servidor-web-clean-arch/target/app_loko.jar"

      # 5. Deploy direto para EC2 privada
      - name: Deploy para EC2 privada
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST_PRIVADO }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Garantir que o diretório exista
            mkdir -p /usr/share/api/

            # Copiar o JAR do runner para a EC2 privada
            scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/servidor-web-clean-arch/target/app_loko.jar ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }}:/usr/share/api/app_loko.jar

            # Ajustar permissões
            ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }} "chmod 644 /usr/share/api/app_loko.jar"

            # Reiniciar container Docker
            ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }} "sudo docker compose -f /home/${{ secrets.REMOTE_USER }}/compose.yaml restart api"
